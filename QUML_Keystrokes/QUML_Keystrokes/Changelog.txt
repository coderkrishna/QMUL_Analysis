31st December 2014
Version: 0.1
Purpose: To review my knowledge that I learned about using various verifiers
to be able to analyze data sets, and also to enhance my knowledge about the 
concepts of machine learning. 

5th May 2015
* Revisiting this project after a while to brush up on various things
* Also to further develop this code to be more readable, usable, etc... 
* Added a new class - ManhattanDistance.cs to implement the basic steps that are involved with the Manhattan verifier
* Having various things be done like printing out the data, and all. 
* Editing the Manhattan Verifier class such that it will print the original data, then calculate the average vector.  

6th May 2015
* Making more code regions possible - that way this code is not only readable, but understandable. 
* Having more annotations, methods in the ManhattanDistance class file. 
* Making further method calls. 
* Adding more user functionality so that the end user can be able to see which verifier to use and therefore see the results. 
* Now creating the data structures for the additional data files which I just imported.  

11th May 2015
* Having a DataFiltering class with one method to really make sure that we put in a text file, 
get out a 2D double array. 
* Adding in the various comments and made sure that everything still makes sense. 

12 May 2015
* Adding in more user data, and right now, having all of the user data entered into the solution is most important thing to get done
* Also to format the txt files and save them as csv files also is an important aspect to making this work

13th May 2015
* Going to add more users to this solution
* Review the in-code documentation that is currently written and edit that.
* After that will be writing the method to calculate the genuine scores which is part of the process for the Manhattan Verifier.

23rd May 2015
* Reviewing the written code and catching up to speed.
* Finishing up the genuine score calculation method.
* Also keeping up with the changelog.

27th May 2015
* Adding more user data - users 10 through 12, the CSV files.  In code will be done later. 
* Making more progress with regards to the ManhattanDistance class. 
* Also making sure to understand the EuclideanDistance verifier via examples and also then will be 
planning out the pseudocode for it as well. 

29th May 2015
* Making sure that I have an Excel file with which I can double check some key points in the Manhattan Distance verifier
* Adding the calculations of the template vectors of users 10 through 20. 
* Will begin the calculation of the genuine scores for users 1 through 20.
* Adding more user data to this solution. Will be adding the data for users 13 through 20. 
(approximately eight more users into this solution)
* Also ensuring that everything is okay even in execution. 

31st May 2015
* Reviewing previously written code to be able to calculate the genuine scores
* Now that is working correctly and I am beginning to have the results double checked

7th June 2015
* Adding the EuclideanDistance.cs class file. 
* Will be then adding more user data into this solution file, and then handling that in code. (TODO item) 
* To-do: For the Manhattan Distance class, will have to write the method to be able to 
calculate the impostor scores

9th June 2015
* Making some more changes with the in-code documentation.
* Also will be adding the method to calculate the impostor scores (zero-effort impostor scores)
	* For the ManhattanDistance.cs class file - This is a to-do item
* If possible, will add maybe three more users (raw data) - That is done!

10th June 2015
* Updating in-code documentation and also renaming variables and writing code in accordance with standards for C# development. 
* Making changes to the ManhattanDistance.cs class and EuclideanDistance.cs class files to be able to have the impostor scores (ManhattanDistance.cs)
to be calculated, and the genuine scores to be calculated in EuclideanDistance.cs class. 
* Plan to add more user data here as well - Maximum 3 more users or so.
* Next, with the ManhattanDistance.cs class file, the following items are to-do items; CalculateImpostorScores(params go here), CalculateFalseAccptRate(params go here), 
and CalculateFalseRejectRate(params go here).
* Begin to double check the manhattan distance results (even the intermediate steps)
	* From the mean calculations, to the genuine scores that are generated.
	* Next, double check on the impostor scores that are generated.

11th June 2015
* Today, I am going to be adding more user data - hopefully, add them to repository and in-code
* Have to be on top of this coding, and also make sure to write abiding by industry practices.
* Make sure to have the calls made for the impostor scores - with the manhattan distance class.

12th June 2015
* Updating the in-code documentation, and annotating the code where it is appropriate. 
* Making sure to apply the normalized (this is very key) verifiers (Manhattan Distance, Euclidean Distance, etc...)
* This is my own project that I am doing on my own, on the side just for the sake of practicing
* Adding more users to the repository as well, and adding these users in-code

13th June 2015
* Adding about five more users to the solution (and the code repository in the process)
* Will then add the same users in-code as parameters for data extraction
* Making additional calls for generating the template vectors etc...
* Working with about 33 user data - generating their template vectors and genuine scores
* Now also will be working on populating the impostor scores of approximately 6 users, and having the other users as the zero-effort impostors

14th June 2015
* Focusing mostly on the data, and having all of the users in the repository and in code
* Have already added 40 users, need to add 60 more - I'll be spending most of my time on this task today
* Then will have parse the CSV files and then will also have to declare and initialize their template vectors and genuine scores
* After that will be the impostor scores that are generated and then will be the various rates
* Also tidying up the code right now and making sure that I can use up the most whitespace possible for declarations and then leave some whitespace
for comments where it is necessary. 